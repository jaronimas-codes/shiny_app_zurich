setwd("C:/Users/jaron/OneDrive - Hochschule Luzern/1_semester/r_bootcamp/7_Snipas_Biya")
library(shiny); runApp('4_shinyApp/shiny_script.R')
runApp('4_shinyApp/shiny_script.R')
getwd()
runApp('4_shinyApp/shiny_script.R')
runApp('4_shinyApp/shiny_script.R')
runApp('4_shinyApp/shiny_script.R')
# Master, Rent, and Burglary data
data <- read.csv("4_shinyApp/data/master_final.csv")
# Neighborhood boundaries using sf
zurich_json_data <- st_read("1_data/json/data/stzh.adm_stadtkreise_v.json")
runApp('4_shinyApp/shiny_script.R')
setwd("C:/Users/jaron/OneDrive - Hochschule Luzern/1_semester/r_bootcamp/7_Snipas_Biya")
# Neighborhood boundaries using sf
zurich_json_data <- st_read("1_data/json/data/stzh.adm_stadtkreise_v.json")
# Master, Rent, and Burglary data
data <- read.csv("4_shinyApp/data/master_final.csv")
data_ab <- read.csv("4_shinyApp/data/ab_final.csv")
data_burglary <- read.csv("4_shinyApp/data/burglary_final.csv")
data_rent <- read.csv("4_shinyApp/data/rent_final.csv")
# Extra data of center points in each neighborhood
center_data <- read.csv("4_shinyApp/data/kreis_center_coords.csv")
tmp_all <- data_burglary %>%
left_join(center_data, by = "neighbourhood_group") %>%
left_join(data_rent, by = "neighbourhood_group") %>%
mutate(FactsRent = "Average Rent")
# Color Palette
palette <- colorFactor("Accent", domain = unique(data$room_type[!is.na(data$room_type)]))
# shiny app start
ui <- fluidPage(
titlePanel("Interactive Map with Leaflet"),
sidebarLayout(
sidebarPanel(
width = 3,
checkboxGroupInput("district", "Select District", choices = unique(tmp_all$neighbourhood_group), selected = c("Kreis 1", "Kreis 5", "Kreis 4")),
checkboxGroupInput("categories", "Select Room Type", choices = unique(data$room_type), selected = unique(data$room_type)),
checkboxGroupInput("burglary", "Select Burglary Rate", choices = unique(tmp_all$FactsEnglish), selected = unique(tmp_all$FactsEnglish)),
checkboxGroupInput("rent", "Select Rent Rate", choices = unique(tmp_all$FactsRent), selected = unique(tmp_all$FactsRent))
),
mainPanel(
width = 9,
leafletOutput("map"),
uiOutput("dynamic_columns")
)
)
)
server <- function(input, output, session) {
# Filter data dynamically
filtered_data <- reactive({
data %>%
filter(
room_type %in% input$categories,
neighbourhood_group %in% input$district
)
})
filtered_burglary <- reactive({
tmp_all %>%
filter(
FactsEnglish %in% input$burglary,
neighbourhood_group %in% input$district
)
})
filtered_rent <- reactive({
tmp_all %>%
filter(
FactsRent %in% input$rent,
neighbourhood_group %in% input$district
)
})
# Summary section
unique_neighbourhoods <- reactive({
unique(filtered_data()$neighbourhood_group)
})
output$dynamic_columns <- renderUI({
columns <- lapply(unique_neighbourhoods(), function(kreis_item) {
filtered_data_kreis <- filtered_data()[filtered_data()$neighbourhood_group == kreis_item, ]
filtered_rent_kreis <- filtered_rent()[filtered_rent()$neighbourhood_group == kreis_item, ]
filtered_burglary_kreis <- filtered_burglary()[filtered_burglary()$neighbourhood_group == kreis_item, ]
summary <- paste(
kreis_item,
"Listings Total:", nrow(filtered_data_kreis),
"Average Rent: ", ifelse(nrow(filtered_rent_kreis) > 0, mean(filtered_rent_kreis$avg.price, na.rm = TRUE), "N/A"),
"Average Burglary: ", ifelse(nrow(filtered_burglary_kreis) > 0, round(mean(filtered_burglary_kreis$BurglariesPerResident, na.rm = TRUE), 3), "N/A"),
sep = "\n"
)
column(width = 3, renderPrint({ cat(summary) }))
})
do.call(tagList, columns)
})
# Map rendering
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(provider = "CartoDB.Positron") %>%
setView(lat = 47.37, lng = 8.543073, zoom = 12) %>%
addPolygons(data = zurich_json_data, color = "darkgrey", weight = 1) %>%
addCircles(
lat = filtered_data()$latitude, lng = filtered_data()$longitude,
color = palette(filtered_data()$room_type),
label = paste(filtered_data()$room_type, "CHF :", filtered_data()$price)
) %>%
addCircles(
lat = filtered_rent()$center_lat, lng = filtered_rent()$center_longitude,
label = paste("Average rent per District: ", filtered_rent()$avg.price),
radius = filtered_rent()$avg.price^2 / 4000, color = "blue",
stroke = TRUE, fill = FALSE, weight = 1.5
) %>%
addCircles(
lat = filtered_burglary()$center_lat, lng = filtered_burglary()$center_longitude,
label = paste("Burglary rate per Resident: ", round(filtered_burglary()$BurglariesPerResident * 100, 2)),
radius = filtered_burglary()$BurglariesPerResident * 40000,
color = "red", stroke = TRUE, fill = FALSE, weight = 1.5
)
})
}
shinyApp(ui, server)
install.packages("here")
library(here)
runApp('4_shinyApp/shiny_script.R')
getwd()
runApp('4_shinyApp/shiny_script.R')
runApp('4_shinyApp/shiny_script.R')
runApp('4_shinyApp/shiny_script.R')
getwd()
burglary <- read.csv(here("1_data/burglary_rate_2009_2022.csv"))
########################################################################
########################################################################
##################      AIRBNB DATA SET    #############################
########################################################################
########################################################################
# in this script we will demonstrate how we load and clean the data
# We start with checking our working directory
getwd()
# Then we load libraries
library(tidyverse)
library(plotly)
library(here)
# DATA SOURCE
# 1. Airbnb - http://insideairbnb.com/get-the-data
# 2. Burglary - https://www.zh.ch/de/politik-staat/statistik-daten/
#    datenkatalog.html#/datasets/2042@kantonspolizei-kanton-zuerich
# 3. Rent price - https://www.zh.ch/de/politik-staat/statistik-daten/
#    datenkatalog.html#/datasets/2042@kantonspolizei-kanton-zuerich
########################################################################
########################################################################
##################      DATA MANUPILATION    ###########################
########################################################################
########################################################################
# Data sets import
ab_listing_0922 <- read.csv(here("1_data/listings_29_12_2022.csv"), header = TRUE)
ab_listing_1222 <- read.csv(here("1_data/listings_29_12_2022.csv"), header = TRUE)
ab_listing_0323 <- read.csv(here("1_data/listings_31_03_2023.csv"), header = TRUE)
ab_listing_0623 <- read.csv(here("1_data/listings_29_06_2023.csv"), header = TRUE)
rent <- read.csv(here("1_data/rent_2022.csv"))
burglary <- read.csv(here("1_data/burglary_rate_2009_2022.csv"))
#########################################################################
###################       AIRBNB DATASETS JOIN       ####################
#########################################################################
# Airbnb data sets are spread between 4 quarters of the year and they will
# be joined together before data manipulation
# Data sets dimension check
tmp_dimension_table <- data.frame(
number.R.C = c("row", "col"),
dim(ab_listing_0922),
dim(ab_listing_1222),
dim(ab_listing_0323),
dim(ab_listing_0623)
)
head(tmp_dimension_table, header = TRUE)
# We use rbind function to merge the quarterly data.
tmp_ab_combained <- rbind(
ab_listing_0922,
ab_listing_1222,
ab_listing_0323,
ab_listing_0623
)
head(tmp_ab_combained)
dim(tmp_ab_combained)
str(tmp_ab_combained)
# keeping only the col that we need, and quick check.
tmp_ab_combained_1 <- tmp_ab_combained %>%
select(
id, name, neighbourhood_group, neighbourhood, latitude,
longitude, room_type, price
)
head(tmp_ab_combained_1)
str(tmp_ab_combained_1)
dim(tmp_ab_combained_1)
# since there is no NA in our selected data. no special treatment is needed
any(is.na(tmp_ab_combained_1))
sum(is.na(tmp_ab_combained_1))
###############################################################################
###################       DUPLICATES CLEANING DOWN       ######################
###############################################################################
# Since we combined 4 data sets of Airbnb listings, it is quite likely, that in
# the past year there were listings, that was in the list for past year, so
# they have to be eliminated for accurate exploratory  data analysis.
tmp_ab_no_duplicates <- tmp_ab_combained_1 %>%
distinct(id, .keep_all = TRUE)
dim(tmp_ab_no_duplicates)
head(tmp_ab_no_duplicates)
###############################################################################
###################       DUPLICATES CLEANING UP       ########################
###############################################################################
# Since data set contains little information about hotel and shared rooms and
# our main focus is on average price of the listing we decide to remove them
# from data set.
room_type_table <- table(tmp_ab_no_duplicates$room_type)
room_type_table
ab_final <- tmp_ab_no_duplicates %>%
filter(room_type %in% c("Entire home/apt", "Private room"))
head(ab_final)
unique(ab_final$room_type)
# checking the data if there is some missing values
anyNA(ab_final)
###############################################################################
###################       Burglary ZURICH       ###############################
###############################################################################
# our second data set is about burglary in the city of Zurich
head(burglary)
str(burglary)
dim(burglary)
# Translating column names from German to English
colnames(burglary) <- c(
"Year", "MunicipalityBFSNr", "MunicipalityName",
"StadtkreisBFSNr", "DistrictName", "LawNumber",
"LawAbk", "Facts", "OffencesTotal",
"OffencesCompleted", "OffencesAttempted",
"Residents", "FrequencyNumber"
)
# Translating "Facts" column data to English
# we have 3 levels to translate
unique(burglary$Facts)
# creation of a new column to put facts in English
burglary$FactsEnglish <- NA
# we use a for loop to translate the facts column
for (i in 1:nrow(burglary)) {
if (burglary$Facts[i] == "Einbruchdiebstahl") {
burglary$FactsEnglish[i] <- "Burglary"
} else if (burglary$Facts[i] == "Einschleichdiebstahl") {
burglary$FactsEnglish[i] <- "SmashAndGrabTheft"
} else {
burglary$FactsEnglish[i] <- "TotalCrime"
}
}
# Filtering for year 2022,city of Zurich, which municipality's
# number is 261 and total crime in the district.
burglary_final <- burglary %>%
select(
Year, MunicipalityBFSNr, DistrictName, FactsEnglish,
OffencesTotal, Residents
) %>%
filter(
Year == 2022,
MunicipalityBFSNr == 261,
FactsEnglish == "TotalCrime",
grepl("^Kreis", DistrictName)
) %>%
mutate("BurglariesPerResident" = OffencesTotal / Residents) %>%
arrange(desc(BurglariesPerResident))
# removing the year col
burglary_final <- burglary_final %>%
select(-Year)
head(burglary_final)
dim(burglary_final)
# checking the data if there is some missing values
anyNA(burglary_final)
###############################################################################
###################       RENT in ZURICH       ################################
###############################################################################
str(rent)
### the idea here is to select all column that we need for our study
rent_final <- rent %>%
select(
RaumeinheitLang, GliederungLang, ZimmerSort, GemeinnuetzigLang,
EinheitLang, PreisartLang, mean
) %>%
filter(
grepl("^Kreis", GliederungLang),
GemeinnuetzigLang == "Alle Wohnungen",
RaumeinheitLang == "Stadtkreise",
PreisartLang == "Netto",
EinheitLang == "Wohnung"
) %>%
group_by(GliederungLang) %>%
summarise(avg.price = round(mean(mean), 0)) %>%
rename(neighbourhood_group = GliederungLang) %>%
arrange(desc(avg.price))
rent_final
# Translating column names from German to English
# colnames(rent_final) <- c("RoomUnitLong","neighbourhood_group", "RoomSort",
#                              "CommonLong","UnitLong","PricetypeLong","Mean")
# Quick check in the data
head(rent_final)
dim(rent_final)
str(rent_final)
unique(rent$RaumeinheitLang)
# the goal for this filtering step is to keep only the elements that we need.
# and calculating the average rent of apartment per neighborhood group
# checking for missing values
anyNA(rent_final)
###############################################################################
###################       Data Merging       ##################################
###############################################################################
# we have our three data set cleaned and treated, we use the left_join function
# to merge them.
# Quick check for col names.
colnames(ab_final)
colnames(burglary_final)
colnames(rent_final)
# change the col name of burglary.Zurich.
burglary_final <- burglary_final %>%
rename(neighbourhood_group = DistrictName)
colnames(burglary_final)
# with left_join we can only join two data sets. Since we have 3 data sets
# and we learned how to create a function during r-bootcamp,
# we will us a function and join_left to merge all data sets at once.
# join_three_datasets <- function(df1, df2, df3, by_column) {
#   result <- left_join(df1, df2, by = by_column) %>%
#     left_join(., df3, by = by_column)
#   return(result)
# }
#
# AB.ZURICH <- join_three_datasets(AB.no.dup.2,
#                                  burglary.Zurich, Rental.price.neighbourhood,
#                                  by = "neighbourhood_group" )
master_final <- ab_final %>%
left_join(burglary_final,
by = "neighbourhood_group"
) %>%
left_join(rent_final, by = "neighbourhood_group")
# saving clean data sets for shiny app and visualization
# write.csv(master_final, file = "master_final.csv", row.names = FALSE)
# write.csv(ab_final, file = "ab_final.csv", row.names = FALSE)
# write.csv(burglary_final, file = "burglary_final.csv", row.names = FALSE)
# write.csv(rent_final, file = "rent_final.csv", row.names = FALSE)
# Quick check
# head(master_final)
# str(master_final)
# dim(master_final)
# any(is.na(master_final))
###############################################################################
###############################################################################
###################       VISUALISATION       #################################
###############################################################################
###############################################################################
# After cleaning and preparing the data. In this step we will do some visualisation
###############################################################################
###################       Violin plot & boxplot      ##########################
###############################################################################
# Prepared data
head(master_final)
# Price per district
summary(master_final$price)
# Eliminate outliers from the analysis
less_than_500 <- master_final %>%
filter(price < 500)
p <- ggplot(data = less_than_500,
mapping = aes(y = price,
x = neighbourhood_group)) +
geom_violin(show.legend = FALSE, fill = "gray", alpha = 0.5) +
geom_boxplot(fill = "green", alpha = 0.1) +
facet_wrap(. ~ room_type)+
labs(title = "Distribution of prices by room types and neighbourhood group") +
xlab("Neighbourhood Group") +
ylab("Price per Night in CHF") +
coord_flip() +
scale_y_log10() +
theme_bw()
ggplotly(p)
###############################################################################
#############       % of room types per neighborhood group        #############
###############################################################################
# Creating a data frame
dist_room_neighbourhood <- data.frame(table(
master_final$room_type,
master_final$neighbourhood_group
))
# Change the column name
names(dist_room_neighbourhood) <- c(
"room.type",
"neighbourhood_group", "frequency"
)
# Frequencies to %
dist_room_neighbourhood <- dist_room_neighbourhood %>%
mutate(Percentage = round((frequency / sum(frequency)) * 100, digits = 2))
# Plot
ggplot(dist_room_neighbourhood, aes(
x = reorder(
neighbourhood_group,
-Percentage
),
y = Percentage,
fill = room.type
)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Distribution of room type by neighbourhood group in Zurich") +
xlab("District") +
ylab("Percentage") +
theme_bw()
###############################################################################
#############       Dist. of accommodation per neighborhood       #############
###############################################################################
listing_neighbourhood <- data.frame(table(master_final$neighbourhood))
names(listing_neighbourhood) <- c("neighbourhood", "accommodation.number")
listing_neighbourhood <- listing_neighbourhood %>%
arrange(accommodation.number)
head(listing_neighbourhood)
str(listing_neighbourhood)
levels(listing_neighbourhood$neighbourhood)
ggplot(listing_neighbourhood, aes(
x = accommodation.number,
y = reorder(
neighbourhood,
accommodation.number
)
)) +
geom_col() +
ggtitle("Distribution of accommodation per neighbourhood") +
xlab("accommodation.number") +
ylab("neighbourhood") +
theme_bw()
###############################################################################
#############         Burglary rate against district      #####################
###############################################################################
colnames(burglary_final)
burglary_final %>%
mutate(order = fct_reorder(
neighbourhood_group,
desc(BurglariesPerResident)
)) %>%
ggplot(aes(
x = order,
y = BurglariesPerResident
)) +
geom_col() +
labs(
title = "Total Burglaries Rate by District",
x = "District",
y = "Total Crime per Resident"
) +
theme_bw()
###############################################################################
###############################################################################
###################          FIT MODEL        #################################
###############################################################################
###############################################################################
# in this part we choose to have a simple linear model and Two-way ANOVA
###############################################################################
##################         Simple linear model      ###########################
###############################################################################
# we choose to predict the price from burglary per resident.
model <- lm(data = less_than_500, price ~ BurglariesPerResident)
summary(model)
# visualization of price against Burglaries Per Resident
#and add fitted regression line to scatterplot
ggplot(data = less_than_500, aes(x = BurglariesPerResident, y = price)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
scale_x_log10()
###############################################################################
####################          Two-way ANOVA       #############################
###############################################################################
# her we have two independent variables (burglaries Per Resident,neighborhood group)
# and our dependent variable (price).
fit <- aov(price~BurglariesPerResident+neighbourhood_group, data = master_final)
summary(fit, intercept = TRUE)
###############################################################################
###############################################################################
###################          CHAPTER OF CHOICE        #########################
###############################################################################
###############################################################################
# Extracting information from the column of complicated row
# for this chapter of choice we decided only use newest data set of Airbnb.
head(ab_listing_0623)
str(ab_listing_0623)
dim(ab_listing_0623)
for (i in 1:nrow(ab_listing_0623)) {
row_words <- unlist(str_split(ab_listing_0623[i, 2], " ")) # Split second
# column's information by space
bedroom_idx <- which(str_detect(row_words, "^bedr")) # extract words with bedr
beds_idx <- which(str_detect(row_words, "^bed")) # extract words with bed
bath_idx <- which(str_detect(row_words, "bath|baths")) # words with bath
# Check if bedroom indexes are found and populate newly created row
if (length(bedroom_idx) > 0) {
ab_listing_0623[i, "NrOfBedrooms"] <- as.numeric(row_words[max(1, bedroom_idx - 1)])
# we know, that the index of number
# is one less than the index of the word that we
} else {
ab_listing_0623[i, "NrOfBedrooms"] <- NA
}
# Check if beds indexes are found and populate newly created row
if (length(beds_idx) > 0) {
ab_listing_0623[i, "NrOfBeds"] <- as.numeric(row_words[max(1, beds_idx - 1)])
# we know, that the index of number is one less than the index of the word that we
# are looking for.
} else {
ab_listing_0623[i, "NrOfBeds"] <- NA
}
# Check if bath indexes are found and populate newly created row
if (length(bath_idx) > 0) {
ab_listing_0623[i, "NrOfBaths"] <- as.numeric(row_words[max(1, bath_idx - 1)])
# we know, that the index of number is one less than the index of the word that we
# are looking for.
} else {
ab_listing_0623[i, "NrOfBaths"] <- NA
}
}
dim(ab_listing_0623)
##### for the second part of the chapter of chioce we have an other script with
##### all details in other folder named 4_shinyApp
runApp('4_shinyApp/shiny_script.R')
